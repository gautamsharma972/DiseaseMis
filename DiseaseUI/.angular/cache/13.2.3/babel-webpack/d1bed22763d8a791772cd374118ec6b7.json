{"ast":null,"code":"import _asyncToGenerator from \"D:\\\\Projects\\\\DiseaseMIS\\\\Disease_UI\\\\Disease_UI\\\\UI\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet EntryFormComponent = class EntryFormComponent {\n  constructor(apiService, toast, datePipe, currentRoute) {\n    this.apiService = apiService;\n    this.toast = toast;\n    this.datePipe = datePipe;\n    this.currentRoute = currentRoute;\n    this.content = {\n      name: \"Animal Disease Incidence Report\",\n      errors: [],\n      animals: [{\n        symptoms: []\n      }],\n      diseases: [],\n      fixedColumnHeader: [],\n      columnHeader: [],\n      forms: {\n        district: {},\n        institute: {},\n        incharge: {},\n        diseases: []\n      },\n      districts: [],\n      institutes: [],\n      incharges: [],\n      apiLink: '/forms',\n      fileLocked: false,\n      formName: \"NonInfectious\"\n    };\n    this.saveFormTitle = 'Save and Continue';\n    this.loading = false;\n    this.formType = \"Incidence\";\n    this.openTab = \"incidence\";\n  }\n\n  ngOnInit() {\n    this.currentRoute.params.subscribe(param => {\n      this.content.forms = {\n        district: {},\n        institute: {},\n        incharge: {},\n        diseases: []\n      };\n      this.content.animals = [{\n        symptoms: []\n      }];\n      this.content.diseases = [];\n      this.content.districts = [];\n      this.content.institutes = [];\n      this.content.incharges = [];\n      this.content.fileLocked = false;\n      this.content.formName = param.formName.replace(\"-\", \"\");\n      console.log(this.content.formName);\n\n      if (param.formName != \"infectious\") {\n        this.content.FormsType_Incidence = 3;\n        this.content.FormsType_Mortality = 4;\n      } else {\n        this.content.FormsType_Incidence = 1;\n        this.content.FormsType_Mortality = 2;\n      }\n\n      this.getBaseData();\n      this.getAnimals();\n      this.getDiseases();\n      this.getIncidenceForm(false);\n    });\n  }\n\n  ngAfterViewInit() {}\n\n  getIncidenceForm(isAfterSaveLoad) {\n    let $this = this;\n    this.loading = true;\n    this.apiService.postData(`/forms/get`, {\n      createDate: this.content.forms.createdDate,\n      formType: this.content.FormsType_Incidence,\n      formName: this.content.formName\n    }).subscribe(res => {\n      this.loading = false;\n\n      if (res != null) {\n        this.content.forms = res;\n        let timer = 0;\n        $this.content.forms.formDiseaseValues.forEach(function (fd) {\n          setTimeout(() => {\n            if ($(`#animal_${fd.symptom.id}_${fd.animal.id}`).length <= 0) {\n              timer++;\n            } else {\n              $(`#animal_${fd.symptom.id}_${fd.animal.id}`).val(fd.value);\n              clearTimeout();\n            }\n          }, timer);\n        });\n\n        if (isAfterSaveLoad) {\n          if (this.content.forms.currentStep == \"incidence\") {\n            this.openTab = \"mortality\";\n          } else if (this.content.forms.currentStep == \"mortality\") {\n            this.saveFormTitle = \"Submit\";\n            this.openTab = \"remarks\";\n          } else if (this.content.forms.currentStep == \"remarks\" || this.content.forms.currentStep == \"completed\") {\n            this.openTab = \"completed\";\n          }\n        }\n\n        if (this.content.forms.isLocked) {\n          this.content.fileLocked = true;\n        }\n\n        this.getSelectedValues();\n      }\n    }, error => {\n      this.loading = false;\n    });\n  }\n\n  getSelectedValues() {\n    var timer = 1;\n\n    if (!this.content.forms.district) {\n      setTimeout(() => {\n        if (this.content.forms.district) {\n          clearTimeout();\n        } else {\n          timer++;\n        }\n      }, timer);\n    } // this.content.districts.push(this.content.forms.district);\n    //$('#selDistrict').val(this.content.forms.district.id);\n\n\n    this.content.institutes = [] = this.content.districts.filter(a => a.id == this.content.forms.district.id)[0].institutes;\n    this.content.incharges = [] = this.content.institutes.filter(a => a.id == this.content.forms.institute.id)[0].incharges; //   $('#selInstitute').val(this.content.forms.institute.id);\n    // $('#selIncharge').val(this.content.incharges[0].id);\n\n    this.content.forms.createdDate = this.datePipe.transform(this.content.forms.createdDate, \"yyyy-MM\"); //$('#txtCreatedDate').val(this.datePipe.transform(this.content.forms.createdDate, \"yyyy-MM\"));\n  }\n\n  getMortalityForm() {\n    let $this = this;\n    this.loading = true;\n    this.apiService.postData(`/forms/get`, {\n      createDate: $('#txtCreatedDate').val() == '' ? new Date() : new Date($('#txtCreatedDate').val()),\n      formType: this.content.FormsType_Mortality,\n      formName: this.content.formName\n    }).subscribe(res => {\n      this.loading = false;\n\n      if (res != null) {\n        this.content.forms = res;\n        let timer = 0;\n        $this.content.forms.formDiseaseValues.forEach(function (fd) {\n          setTimeout(() => {\n            if ($(`#animal_${fd.symptom.id}_${fd.animal.id}`).length <= 0) {\n              timer++;\n            } else {\n              $(`#animal_${fd.symptom.id}_${fd.animal.id}`).val(fd.value);\n              clearTimeout();\n            }\n          }, timer);\n        });\n        this.getSelectedValues();\n      }\n    }, error => {\n      this.loading = false;\n    });\n  }\n\n  calcTotal(symptom) {\n    var sum = 0;\n    $(`.animal_${symptom.id}`).each(function () {\n      // @ts-ignore\n      sum += +$(this).val();\n    });\n    $(`.animal_${symptom.id}_total`).val(sum);\n  }\n\n  getAnimals() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.loading = true;\n\n      _this.apiService.getData(`/master/animals`, null).subscribe(res => {\n        _this.loading = false;\n\n        if (!res) {\n          _this.toast.error(\"Could not connect to Server. Try again after sometime.\", {\n            position: 'top-right',\n            autoClose: true\n          });\n        } else {\n          if (res.length <= 0) {\n            _this.content.errors.push(\"No animals found.\");\n          }\n\n          _this.content.animals = res;\n\n          _this.content.animals.forEach(function (animal) {\n            animal.symptoms = [];\n            animal.disease = {};\n          });\n        }\n      }, error => {\n        _this.loading = false;\n\n        _this.content.errors.push(\"Could not load data at this time. Try again later.\");\n      });\n    })();\n  }\n\n  getDiseases() {\n    this.loading = true;\n    this.apiService.getData(`/diseases/byCategory/${this.content.formName == 'infectious' ? 2 : 1}`, null).subscribe(res => {\n      this.loading = false;\n\n      if (!res) {\n        this.toast.error(\"Could not connect to Server. Try again after sometime.\", {\n          position: 'top-right',\n          autoClose: true\n        });\n      } else {\n        if (res.length <= 0) {\n          this.content.errors.push(\"No Diseases found!!\");\n        }\n\n        res.forEach(function (disease) {\n          disease.symptoms.forEach(function (_sym) {\n            _sym.total = 0;\n\n            _sym.subSymptoms.forEach(function (_sub) {\n              _sub.total = 0;\n            });\n          });\n        });\n        this.content.diseases = res;\n        this.getColumnHeaders();\n      }\n    }, error => {\n      this.loading = false;\n      this.content.errors.push(\"Could not load data at this time. Try again later.\");\n    });\n  }\n\n  getFixedHeaders() {\n    let flag = 0;\n    this.content.diseases.forEach(disease => {\n      disease.symptoms.forEach(symptom => {\n        symptom.subSymptoms.forEach(subSymptom => {\n          if (subSymptom.name != null && flag == 0) {\n            this.content.fixedColumnHeader.push(\"Sub Symptoms\");\n            flag = 1;\n          }\n        });\n      });\n    });\n  }\n\n  getColumnHeaders() {\n    if (this.content.diseases.length > 0) {\n      if (this.content.fixedColumnHeader.filter(a => a == \"Diseases\").length <= 0) this.content.fixedColumnHeader.push(\"Diseases\");\n      this.content.diseases.every(disease => {\n        if (disease.symptoms.length > 0) {\n          if (this.content.fixedColumnHeader.filter(a => a == \"Symptoms\").length <= 0) this.content.fixedColumnHeader.push(\"Symptoms\");\n          return false;\n        }\n\n        return true;\n      });\n    }\n\n    this.getFixedHeaders();\n    this.content.animals.forEach(animal => {\n      if (this.content.fixedColumnHeader.filter(a => a == animal.name).length <= 0) this.content.columnHeader.push(animal.name);\n    });\n    if (this.content.fixedColumnHeader.filter(a => a == \"Total\").length <= 0) this.content.columnHeader.push(\"Total\");\n  }\n\n  save() {\n    let $this = this;\n    this.loading = false;\n    this.content.forms.animals = this.content.animals;\n\n    var _obj = this.createPostObject($this);\n\n    this.apiService.postData(this.content.apiLink, _obj).subscribe(res => {\n      this.loading = false;\n\n      if (res) {\n        this.getIncidenceForm(true);\n      }\n    });\n  }\n\n  createPostObject($this) {\n    var _obj = {\n      formType: this.openTab == 'incidence' ? this.content.FormsType_Incidence : this.openTab == 'mortality' ? this.content.FormsType_Mortality : this.content.FormsType_Incidence,\n      createdDate: this.content.forms.createdDate,\n      district: this.content.forms.district,\n      institute: this.content.forms.institute,\n      incharge: this.content.forms.incharge,\n      animals: this.content.animals,\n      currentStep: this.openTab,\n      remarks: this.content.forms.remarks,\n      name: this.content.formName\n    };\n\n    _obj.animals.forEach(function (_animal) {\n      _animal.symptoms = [];\n      $this.content.diseases.forEach(function (disease) {\n        disease.symptoms.forEach(function (symptom) {\n          var _obj = {\n            symptom: symptom,\n            value: $(`#animal_${symptom.id}_${_animal.id}`).val()\n          };\n          _obj.symptom.disease = {};\n          $.extend(_obj.symptom.disease, disease);\n          delete _obj.symptom.disease.symptoms;\n\n          _animal.symptoms.push(_obj);\n        });\n      });\n    });\n\n    return _obj;\n  }\n\n  getBaseData() {\n    this.apiService.getData('/master/districts', null).subscribe(res => {\n      if (!res) {\n        this.toast.error(\"Could not connect to Server. Try again after sometime.\", {\n          position: 'top-right',\n          autoClose: true\n        });\n      } else {\n        if (res.data.length <= 0) {\n          this.content.errorMessage = \"No Institutes found. Click 'Add New' to add.\";\n        }\n\n        this.content.districts = res.data;\n        console.log(res.data);\n      }\n    }, error => {\n      this.content.errorMessage = \"Could not load data at this time. Try again later.\";\n    });\n  }\n\n  changeDistrict(event) {\n    this.content.institutes = [] = this.content.districts.filter(a => a.id == event.target.value)[0].institutes;\n  }\n\n  changeInstitute(event) {\n    this.content.incharges = [] = this.content.institutes.filter(a => a.id == event.target.value)[0].incharges;\n  }\n\n};\nEntryFormComponent = __decorate([Component({\n  selector: 'app-entry-form',\n  templateUrl: './entry-form.component.html',\n  styleUrls: ['./entry-form.component.css']\n})], EntryFormComponent);\nexport { EntryFormComponent };","map":{"version":3,"sources":["D:/Projects/DiseaseMIS/Disease_UI/Disease_UI/UI/src/app/views/forms/entry-form/entry-form.component.ts"],"names":["__decorate","Component","EntryFormComponent","constructor","apiService","toast","datePipe","currentRoute","content","name","errors","animals","symptoms","diseases","fixedColumnHeader","columnHeader","forms","district","institute","incharge","districts","institutes","incharges","apiLink","fileLocked","formName","saveFormTitle","loading","formType","openTab","ngOnInit","params","subscribe","param","replace","console","log","FormsType_Incidence","FormsType_Mortality","getBaseData","getAnimals","getDiseases","getIncidenceForm","ngAfterViewInit","isAfterSaveLoad","$this","postData","createDate","createdDate","res","timer","formDiseaseValues","forEach","fd","setTimeout","$","symptom","id","animal","length","val","value","clearTimeout","currentStep","isLocked","getSelectedValues","error","filter","a","transform","getMortalityForm","Date","calcTotal","sum","each","getData","position","autoClose","push","disease","_sym","total","subSymptoms","_sub","getColumnHeaders","getFixedHeaders","flag","subSymptom","every","save","_obj","createPostObject","remarks","_animal","extend","data","errorMessage","changeDistrict","event","target","changeInstitute","selector","templateUrl","styleUrls"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\r\nimport { Component } from '@angular/core';\r\nlet EntryFormComponent = class EntryFormComponent {\r\n    constructor(apiService, toast, datePipe, currentRoute) {\r\n        this.apiService = apiService;\r\n        this.toast = toast;\r\n        this.datePipe = datePipe;\r\n        this.currentRoute = currentRoute;\r\n        this.content = {\r\n            name: \"Animal Disease Incidence Report\",\r\n            errors: [],\r\n            animals: [{\r\n                    symptoms: []\r\n                }],\r\n            diseases: [],\r\n            fixedColumnHeader: [],\r\n            columnHeader: [],\r\n            forms: {\r\n                district: {},\r\n                institute: {},\r\n                incharge: {},\r\n                diseases: []\r\n            },\r\n            districts: [],\r\n            institutes: [],\r\n            incharges: [],\r\n            apiLink: '/forms',\r\n            fileLocked: false,\r\n            formName: \"NonInfectious\"\r\n        };\r\n        this.saveFormTitle = 'Save and Continue';\r\n        this.loading = false;\r\n        this.formType = \"Incidence\";\r\n        this.openTab = \"incidence\";\r\n    }\r\n    ngOnInit() {\r\n        this.currentRoute.params.subscribe((param) => {\r\n            this.content.forms = {\r\n                district: {},\r\n                institute: {},\r\n                incharge: {},\r\n                diseases: []\r\n            };\r\n            this.content.animals = [{\r\n                    symptoms: []\r\n                }];\r\n            this.content.diseases = [];\r\n            this.content.districts = [];\r\n            this.content.institutes = [];\r\n            this.content.incharges = [];\r\n            this.content.fileLocked = false;\r\n            this.content.formName = param.formName.replace(\"-\", \"\");\r\n            console.log(this.content.formName);\r\n            if (param.formName != \"infectious\") {\r\n                this.content.FormsType_Incidence = 3;\r\n                this.content.FormsType_Mortality = 4;\r\n            }\r\n            else {\r\n                this.content.FormsType_Incidence = 1;\r\n                this.content.FormsType_Mortality = 2;\r\n            }\r\n            this.getBaseData();\r\n            this.getAnimals();\r\n            this.getDiseases();\r\n            this.getIncidenceForm(false);\r\n        });\r\n    }\r\n    ngAfterViewInit() {\r\n    }\r\n    getIncidenceForm(isAfterSaveLoad) {\r\n        let $this = this;\r\n        this.loading = true;\r\n        this.apiService.postData(`/forms/get`, {\r\n            createDate: this.content.forms.createdDate,\r\n            formType: this.content.FormsType_Incidence,\r\n            formName: this.content.formName\r\n        }).subscribe((res) => {\r\n            this.loading = false;\r\n            if (res != null) {\r\n                this.content.forms = res;\r\n                let timer = 0;\r\n                $this.content.forms.formDiseaseValues.forEach(function (fd) {\r\n                    setTimeout(() => {\r\n                        if ($(`#animal_${fd.symptom.id}_${fd.animal.id}`).length <= 0) {\r\n                            timer++;\r\n                        }\r\n                        else {\r\n                            $(`#animal_${fd.symptom.id}_${fd.animal.id}`).val(fd.value);\r\n                            clearTimeout();\r\n                        }\r\n                    }, timer);\r\n                });\r\n                if (isAfterSaveLoad) {\r\n                    if (this.content.forms.currentStep == \"incidence\") {\r\n                        this.openTab = \"mortality\";\r\n                    }\r\n                    else if (this.content.forms.currentStep == \"mortality\") {\r\n                        this.saveFormTitle = \"Submit\";\r\n                        this.openTab = \"remarks\";\r\n                    }\r\n                    else if (this.content.forms.currentStep == \"remarks\" ||\r\n                        this.content.forms.currentStep == \"completed\") {\r\n                        this.openTab = \"completed\";\r\n                    }\r\n                }\r\n                if (this.content.forms.isLocked) {\r\n                    this.content.fileLocked = true;\r\n                }\r\n                this.getSelectedValues();\r\n            }\r\n        }, error => {\r\n            this.loading = false;\r\n        });\r\n    }\r\n    getSelectedValues() {\r\n        var timer = 1;\r\n        if (!this.content.forms.district) {\r\n            setTimeout(() => {\r\n                if (this.content.forms.district) {\r\n                    clearTimeout();\r\n                }\r\n                else {\r\n                    timer++;\r\n                }\r\n            }, timer);\r\n        }\r\n        // this.content.districts.push(this.content.forms.district);\r\n        //$('#selDistrict').val(this.content.forms.district.id);\r\n        this.content.institutes = [] = this.content.districts.filter((a) => a.id == this.content.forms.district.id)[0].institutes;\r\n        this.content.incharges = [] = this.content.institutes.filter((a) => a.id == this.content.forms.institute.id)[0].incharges;\r\n        //   $('#selInstitute').val(this.content.forms.institute.id);\r\n        // $('#selIncharge').val(this.content.incharges[0].id);\r\n        this.content.forms.createdDate = this.datePipe.transform(this.content.forms.createdDate, \"yyyy-MM\");\r\n        //$('#txtCreatedDate').val(this.datePipe.transform(this.content.forms.createdDate, \"yyyy-MM\"));\r\n    }\r\n    getMortalityForm() {\r\n        let $this = this;\r\n        this.loading = true;\r\n        this.apiService.postData(`/forms/get`, {\r\n            createDate: $('#txtCreatedDate').val() == '' ? new Date() : new Date($('#txtCreatedDate').val()),\r\n            formType: this.content.FormsType_Mortality,\r\n            formName: this.content.formName\r\n        }).subscribe((res) => {\r\n            this.loading = false;\r\n            if (res != null) {\r\n                this.content.forms = res;\r\n                let timer = 0;\r\n                $this.content.forms.formDiseaseValues.forEach(function (fd) {\r\n                    setTimeout(() => {\r\n                        if ($(`#animal_${fd.symptom.id}_${fd.animal.id}`).length <= 0) {\r\n                            timer++;\r\n                        }\r\n                        else {\r\n                            $(`#animal_${fd.symptom.id}_${fd.animal.id}`).val(fd.value);\r\n                            clearTimeout();\r\n                        }\r\n                    }, timer);\r\n                });\r\n                this.getSelectedValues();\r\n            }\r\n        }, error => {\r\n            this.loading = false;\r\n        });\r\n    }\r\n    calcTotal(symptom) {\r\n        var sum = 0;\r\n        $(`.animal_${symptom.id}`).each(function () {\r\n            // @ts-ignore\r\n            sum += +$(this).val();\r\n        });\r\n        $(`.animal_${symptom.id}_total`).val(sum);\r\n    }\r\n    async getAnimals() {\r\n        this.loading = true;\r\n        this.apiService.getData(`/master/animals`, null)\r\n            .subscribe((res) => {\r\n            this.loading = false;\r\n            if (!res) {\r\n                this.toast.error(\"Could not connect to Server. Try again after sometime.\", {\r\n                    position: 'top-right',\r\n                    autoClose: true\r\n                });\r\n            }\r\n            else {\r\n                if (res.length <= 0) {\r\n                    this.content.errors.push(\"No animals found.\");\r\n                }\r\n                this.content.animals = res;\r\n                this.content.animals.forEach(function (animal) {\r\n                    animal.symptoms = [];\r\n                    animal.disease = {};\r\n                });\r\n            }\r\n        }, error => {\r\n            this.loading = false;\r\n            this.content.errors.push(\"Could not load data at this time. Try again later.\");\r\n        });\r\n    }\r\n    getDiseases() {\r\n        this.loading = true;\r\n        this.apiService.getData(`/diseases/byCategory/${this.content.formName == 'infectious' ? 2 : 1}`, null)\r\n            .subscribe((res) => {\r\n            this.loading = false;\r\n            if (!res) {\r\n                this.toast.error(\"Could not connect to Server. Try again after sometime.\", {\r\n                    position: 'top-right',\r\n                    autoClose: true\r\n                });\r\n            }\r\n            else {\r\n                if (res.length <= 0) {\r\n                    this.content.errors.push(\"No Diseases found!!\");\r\n                }\r\n                res.forEach(function (disease) {\r\n                    disease.symptoms.forEach(function (_sym) {\r\n                        _sym.total = 0;\r\n                        _sym.subSymptoms.forEach(function (_sub) {\r\n                            _sub.total = 0;\r\n                        });\r\n                    });\r\n                });\r\n                this.content.diseases = res;\r\n                this.getColumnHeaders();\r\n            }\r\n        }, error => {\r\n            this.loading = false;\r\n            this.content.errors.push(\"Could not load data at this time. Try again later.\");\r\n        });\r\n    }\r\n    getFixedHeaders() {\r\n        let flag = 0;\r\n        this.content.diseases.forEach((disease) => {\r\n            disease.symptoms.forEach((symptom) => {\r\n                symptom.subSymptoms.forEach((subSymptom) => {\r\n                    if (subSymptom.name != null && flag == 0) {\r\n                        this.content.fixedColumnHeader.push(\"Sub Symptoms\");\r\n                        flag = 1;\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n    getColumnHeaders() {\r\n        if (this.content.diseases.length > 0) {\r\n            if (this.content.fixedColumnHeader.filter((a) => a == \"Diseases\").length <= 0)\r\n                this.content.fixedColumnHeader.push(\"Diseases\");\r\n            this.content.diseases.every((disease) => {\r\n                if (disease.symptoms.length > 0) {\r\n                    if (this.content.fixedColumnHeader.filter((a) => a == \"Symptoms\").length <= 0)\r\n                        this.content.fixedColumnHeader.push(\"Symptoms\");\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n        }\r\n        this.getFixedHeaders();\r\n        this.content.animals.forEach((animal) => {\r\n            if (this.content.fixedColumnHeader.filter((a) => a == animal.name).length <= 0)\r\n                this.content.columnHeader.push(animal.name);\r\n        });\r\n        if (this.content.fixedColumnHeader.filter((a) => a == \"Total\").length <= 0)\r\n            this.content.columnHeader.push(\"Total\");\r\n    }\r\n    save() {\r\n        let $this = this;\r\n        this.loading = false;\r\n        this.content.forms.animals = this.content.animals;\r\n        var _obj = this.createPostObject($this);\r\n        this.apiService.postData(this.content.apiLink, _obj).subscribe((res) => {\r\n            this.loading = false;\r\n            if (res) {\r\n                this.getIncidenceForm(true);\r\n            }\r\n        });\r\n    }\r\n    createPostObject($this) {\r\n        var _obj = {\r\n            formType: this.openTab == 'incidence'\r\n                ? this.content.FormsType_Incidence :\r\n                this.openTab == 'mortality'\r\n                    ? this.content.FormsType_Mortality : this.content.FormsType_Incidence,\r\n            createdDate: this.content.forms.createdDate,\r\n            district: this.content.forms.district,\r\n            institute: this.content.forms.institute,\r\n            incharge: this.content.forms.incharge,\r\n            animals: this.content.animals,\r\n            currentStep: this.openTab,\r\n            remarks: this.content.forms.remarks,\r\n            name: this.content.formName\r\n        };\r\n        _obj.animals.forEach(function (_animal) {\r\n            _animal.symptoms = [];\r\n            $this.content.diseases.forEach(function (disease) {\r\n                disease.symptoms.forEach(function (symptom) {\r\n                    var _obj = {\r\n                        symptom: symptom,\r\n                        value: $(`#animal_${symptom.id}_${_animal.id}`).val()\r\n                    };\r\n                    _obj.symptom.disease = {};\r\n                    $.extend(_obj.symptom.disease, disease);\r\n                    delete _obj.symptom.disease.symptoms;\r\n                    _animal.symptoms.push(_obj);\r\n                });\r\n            });\r\n        });\r\n        return _obj;\r\n    }\r\n    getBaseData() {\r\n        this.apiService.getData('/master/districts', null)\r\n            .subscribe((res) => {\r\n            if (!res) {\r\n                this.toast.error(\"Could not connect to Server. Try again after sometime.\", {\r\n                    position: 'top-right',\r\n                    autoClose: true\r\n                });\r\n            }\r\n            else {\r\n                if (res.data.length <= 0) {\r\n                    this.content.errorMessage = \"No Institutes found. Click 'Add New' to add.\";\r\n                }\r\n                this.content.districts = res.data;\r\n                console.log(res.data);\r\n            }\r\n        }, error => {\r\n            this.content.errorMessage = \"Could not load data at this time. Try again later.\";\r\n        });\r\n    }\r\n    changeDistrict(event) {\r\n        this.content.institutes = [] = this.content.districts.filter((a) => a.id == event.target.value)[0].institutes;\r\n    }\r\n    changeInstitute(event) {\r\n        this.content.incharges = [] = this.content.institutes.filter((a) => a.id == event.target.value)[0].incharges;\r\n    }\r\n};\r\nEntryFormComponent = __decorate([\r\n    Component({\r\n        selector: 'app-entry-form',\r\n        templateUrl: './entry-form.component.html',\r\n        styleUrls: ['./entry-form.component.css']\r\n    })\r\n], EntryFormComponent);\r\nexport { EntryFormComponent };\r\n"]},"metadata":{},"sourceType":"module"}