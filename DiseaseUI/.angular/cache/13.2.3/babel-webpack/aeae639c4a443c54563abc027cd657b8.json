{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@ngneat/hot-toast\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    constructor(http, toast) {\n      this.http = http;\n      this.toast = toast;\n      this.content = {};\n    }\n\n    getData(url, id) {\n      return this.http.get(`${environment.apiUrl}${url}`, {\n        withCredentials: true\n      }).pipe(map(content => {\n        if (content == null || content.length <= 0) {\n          this.content.errorMessage = \"No Data Found!!\";\n          return content;\n        } else {\n          this.content.data = content; // @ts-ignore\n\n          this.content.fields = Object.keys(content);\n          return content;\n        }\n      }), error => {\n        return error;\n      });\n    }\n\n    postData(url, data) {\n      return this.http.post(`${environment.apiUrl}${url}`, data, {\n        withCredentials: true\n      }).pipe(map(content => {\n        if (content != null && content.hasOwnProperty('hasError') && content.hasError) {\n          if (content.errors[0] == '1062') {\n            this.toast.error(\"Same data already exists. Try again with another name.\", {\n              position: 'top-right',\n              autoClose: true\n            });\n            return false;\n          } else {\n            this.toast.error(content.errors[0], {\n              position: 'top-right',\n              autoClose: true\n            });\n            return false;\n          }\n        }\n\n        return content;\n      }), error => {\n        return error;\n      });\n    }\n\n    putData(url, id, data) {\n      return this.http.put(`${environment.apiUrl}${url}`, data, {\n        withCredentials: true\n      }).pipe(map(content => {\n        if (content != null && content.hasOwnProperty('hasError') && content.hasError) {\n          if (content.errors[0] == '1062') {\n            this.toast.error(\"Same data already exists. Try again with another name.\", {\n              position: 'top-right',\n              autoClose: true\n            });\n            return false;\n          } else {\n            this.toast.error(content.errors[0], {\n              position: 'top-right',\n              autoClose: true\n            });\n            return false;\n          }\n        }\n\n        return content;\n      }), error => {\n        return error;\n      });\n    }\n\n    deleteData(url, id) {\n      return this.http.delete(`${environment.apiUrl}${url}`, {\n        withCredentials: true\n      }).pipe(map(content => {\n        if (content.hasError) {\n          this.toast.error(content.errors[0], {\n            position: 'top-right',\n            autoClose: true\n          });\n        } else {\n          this.toast.success(\"Item deleted\", {\n            position: 'top-right',\n            autoClose: true\n          });\n        }\n      }), error => {\n        return error;\n      });\n    }\n\n  }\n\n  ApiService.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.HotToastService));\n  };\n\n  ApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}