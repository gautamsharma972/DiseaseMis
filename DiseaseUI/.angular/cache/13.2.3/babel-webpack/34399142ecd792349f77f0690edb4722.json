{"ast":null,"code":"import _asyncToGenerator from \"D:\\\\Projects\\\\DiseaseMIS\\\\Disease_UI\\\\Disease_UI\\\\UI\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet NonInfectiousComponent = class NonInfectiousComponent {\n  constructor(apiService, toast, datePipe) {\n    this.apiService = apiService;\n    this.toast = toast;\n    this.datePipe = datePipe;\n    this.content = {\n      name: \"Animal Disease Incidence Report\",\n      errors: [],\n      animals: [{\n        symptoms: []\n      }],\n      diseases: [],\n      fixedColumnHeader: [],\n      columnHeader: [],\n      forms: {\n        district: {},\n        institute: {},\n        incharge: {},\n        diseases: []\n      },\n      districts: [],\n      institutes: [],\n      incharges: [],\n      apiLink: '/forms'\n    };\n    this.formIncidenceIsDisabled = false;\n    this.saveFormTitle = 'Save and Continue';\n    this.loading = false;\n    this.formType = \"Incidence\";\n    this.openTab = \"incidence\";\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this.getAnimals();\n      yield _this.getDiseases();\n    })();\n  }\n\n  ngAfterViewInit() {\n    this.getIncidenceForm(false);\n  }\n\n  getIncidenceForm(isAfterSaveLoad) {\n    let $this = this;\n    this.loading = true;\n    this.apiService.getData(`/forms/3`, 3).subscribe(res => {\n      this.loading = false;\n\n      if (res != null) {\n        this.content.forms = res;\n        this.formIncidenceIsDisabled = true;\n        let timer = 0;\n        $this.content.forms.formDiseaseValues.forEach(function (fd) {\n          setTimeout(() => {\n            if ($(`#animal_${fd.symptom.id}_${fd.animal.id}`).length <= 0) {\n              timer++;\n            } else {\n              $(`#animal_${fd.symptom.id}_${fd.animal.id}`).val(fd.value);\n              clearTimeout();\n            }\n          }, timer);\n        });\n\n        if (isAfterSaveLoad) {\n          if (this.content.forms.currentStep == \"incidence\") {\n            this.openTab = \"mortality\";\n          } else if (this.content.forms.currentStep == \"mortality\") {\n            this.openTab = \"remarks\";\n          } else if (this.content.forms.currentStep == \"remarks\") {\n            this.openTab = \"completed\";\n          }\n        }\n\n        this.getSelectedValues();\n        console.log(this.content.forms);\n      }\n    }, error => {\n      this.loading = false;\n    });\n  }\n\n  getSelectedValues() {\n    var timer = 1;\n\n    if (!this.content.forms.district) {\n      setTimeout(() => {\n        if (this.content.forms.district) {\n          clearTimeout();\n        } else {\n          timer++;\n        }\n      }, timer);\n    }\n\n    this.content.districts.push(this.content.forms.district);\n    $('#selDistrict').val(this.content.forms.district.id);\n    this.content.institutes = [] = this.content.districts.filter(a => a.id == this.content.forms.district.id)[0].institutes;\n    this.content.incharges = [] = this.content.institutes.filter(a => a.id == this.content.forms.institute.id)[0].incharges;\n    console.log(\"after timer\", this.content);\n    $('#selInstitute').val(this.content.forms.institute.id);\n    $('#selIncharge').val(this.content.incharges[0].id);\n    $('#createdDate').val(this.datePipe.transform(this.content.forms.createdDate, \"MMM yyyy\"));\n  }\n\n  getMortalityForm() {\n    let $this = this;\n    this.loading = true;\n    this.apiService.getData(`/forms/4`, 4).subscribe(res => {\n      this.loading = false;\n\n      if (res != null) {\n        this.content.forms = res;\n        let timer = 0;\n        $this.content.forms.formDiseaseValues.forEach(function (fd) {\n          setTimeout(() => {\n            if ($(`#animal_${fd.symptom.id}_${fd.animal.id}`).length <= 0) {\n              timer++;\n            } else {\n              $(`#animal_${fd.symptom.id}_${fd.animal.id}`).val(fd.value);\n              clearTimeout();\n            }\n          }, timer);\n        });\n        this.getSelectedValues();\n      }\n    }, error => {\n      this.loading = false;\n    });\n  }\n\n  calcTotal(symptom) {\n    var sum = 0;\n    $(`.animal_${symptom.id}`).each(function () {\n      // @ts-ignore\n      sum += +$(this).val();\n    });\n    $(`.animal_${symptom.id}_total`).val(sum);\n  }\n\n  getAnimals() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.loading = true;\n\n      _this2.apiService.getData(`/master/animals`, null).subscribe(res => {\n        _this2.loading = false;\n\n        if (!res) {\n          _this2.toast.error(\"Could not connect to Server. Try again after sometime.\", {\n            position: 'top-right',\n            autoClose: true\n          });\n        } else {\n          if (res.length <= 0) {\n            _this2.content.errors.push(\"No animals found.\");\n          }\n\n          _this2.content.animals = res;\n\n          _this2.content.animals.forEach(function (animal) {\n            animal.symptoms = [];\n            animal.disease = {};\n          });\n        }\n      }, error => {\n        _this2.loading = false;\n\n        _this2.content.errors.push(\"Could not load data at this time. Try again later.\");\n      });\n    })();\n  }\n\n  getDiseases() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      _this3.loading = true;\n\n      _this3.apiService.getData(`/diseases/byCategory/1`, null).subscribe(res => {\n        _this3.loading = false;\n\n        if (!res) {\n          _this3.toast.error(\"Could not connect to Server. Try again after sometime.\", {\n            position: 'top-right',\n            autoClose: true\n          });\n        } else {\n          if (res.length <= 0) {\n            _this3.content.errors.push(\"No Diseases found!!\");\n          }\n\n          res.forEach(function (disease) {\n            disease.symptoms.forEach(function (_sym) {\n              _sym.total = 0;\n\n              _sym.subSymptoms.forEach(function (_sub) {\n                _sub.total = 0;\n              });\n            });\n          });\n          _this3.content.diseases = res;\n\n          _this3.getColumnHeaders();\n        }\n      }, error => {\n        _this3.loading = false;\n\n        _this3.content.errors.push(\"Could not load data at this time. Try again later.\");\n      });\n    })();\n  }\n\n  getFixedHeaders() {\n    let flag = 0;\n    this.content.diseases.forEach(disease => {\n      disease.symptoms.forEach(symptom => {\n        symptom.subSymptoms.forEach(subSymptom => {\n          if (subSymptom.name != null && flag == 0) {\n            this.content.fixedColumnHeader.push(\"Sub Symptoms\");\n            flag = 1;\n          }\n        });\n      });\n    });\n  }\n\n  getColumnHeaders() {\n    if (this.content.diseases.length > 0) {\n      this.content.fixedColumnHeader.push(\"Diseases\");\n      this.content.diseases.every(disease => {\n        if (disease.symptoms.length > 0) {\n          this.content.fixedColumnHeader.push(\"Symptoms\");\n          return false;\n        }\n\n        return true;\n      });\n    }\n\n    this.getFixedHeaders();\n    this.content.animals.forEach(animal => {\n      this.content.columnHeader.push(animal.name);\n    });\n    this.content.columnHeader.push(\"Total\");\n  }\n\n  save() {\n    let $this = this;\n    this.loading = false;\n    this.content.forms.animals = this.content.animals;\n    var _obj = {\n      formType: this.openTab == 'incidence' ? 3 : 4,\n      createdDate: this.content.forms.createdDate,\n      district: this.content.forms.district,\n      institute: this.content.forms.institute,\n      incharge: this.content.forms.incharge,\n      animals: this.content.animals,\n      currentStep: this.openTab,\n      remarks: this.content.forms.remarks,\n      name: \"NonInfectious\"\n    };\n    this.content.forms.currentStep = this.openTab;\n    this.content.forms.formType = this.openTab == \"incidence\" ? 3 : 4;\n\n    _obj.animals.forEach(function (_animal) {\n      _animal.symptoms = [];\n      $this.content.diseases.forEach(function (disease) {\n        disease.symptoms.forEach(function (symptom) {\n          var _obj = {\n            symptom: symptom,\n            value: $(`#animal_${symptom.id}_${_animal.id}`).val()\n          };\n          _obj.symptom.disease = {};\n          $.extend(_obj.symptom.disease, disease);\n          delete _obj.symptom.disease.symptoms;\n\n          _animal.symptoms.push(_obj);\n        });\n      });\n    });\n\n    this.apiService.postData(this.content.apiLink, _obj).subscribe(res => {\n      this.loading = false;\n\n      if (res) {\n        this.getIncidenceForm(true);\n      }\n    });\n  }\n\n};\nNonInfectiousComponent = __decorate([Component({\n  selector: 'app-non-infectious',\n  templateUrl: './non-infectious.component.html',\n  styleUrls: ['./non-infectious.component.css']\n})], NonInfectiousComponent);\nexport { NonInfectiousComponent };","map":{"version":3,"sources":["D:/Projects/DiseaseMIS/Disease_UI/Disease_UI/UI/src/app/views/forms/non-infectious/non-infectious.component.ts"],"names":["__decorate","Component","NonInfectiousComponent","constructor","apiService","toast","datePipe","content","name","errors","animals","symptoms","diseases","fixedColumnHeader","columnHeader","forms","district","institute","incharge","districts","institutes","incharges","apiLink","formIncidenceIsDisabled","saveFormTitle","loading","formType","openTab","ngOnInit","getAnimals","getDiseases","ngAfterViewInit","getIncidenceForm","isAfterSaveLoad","$this","getData","subscribe","res","timer","formDiseaseValues","forEach","fd","setTimeout","$","symptom","id","animal","length","val","value","clearTimeout","currentStep","getSelectedValues","console","log","error","push","filter","a","transform","createdDate","getMortalityForm","calcTotal","sum","each","position","autoClose","disease","_sym","total","subSymptoms","_sub","getColumnHeaders","getFixedHeaders","flag","subSymptom","every","save","_obj","remarks","_animal","extend","postData","selector","templateUrl","styleUrls"],"mappings":";AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,SAAT,QAA0B,eAA1B;AACA,IAAIC,sBAAsB,GAAG,MAAMA,sBAAN,CAA6B;AACtDC,EAAAA,WAAW,CAACC,UAAD,EAAaC,KAAb,EAAoBC,QAApB,EAA8B;AACrC,SAAKF,UAAL,GAAkBA,UAAlB;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,OAAL,GAAe;AACXC,MAAAA,IAAI,EAAE,iCADK;AAEXC,MAAAA,MAAM,EAAE,EAFG;AAGXC,MAAAA,OAAO,EAAE,CAAC;AACFC,QAAAA,QAAQ,EAAE;AADR,OAAD,CAHE;AAMXC,MAAAA,QAAQ,EAAE,EANC;AAOXC,MAAAA,iBAAiB,EAAE,EAPR;AAQXC,MAAAA,YAAY,EAAE,EARH;AASXC,MAAAA,KAAK,EAAE;AACHC,QAAAA,QAAQ,EAAE,EADP;AAEHC,QAAAA,SAAS,EAAE,EAFR;AAGHC,QAAAA,QAAQ,EAAE,EAHP;AAIHN,QAAAA,QAAQ,EAAE;AAJP,OATI;AAeXO,MAAAA,SAAS,EAAE,EAfA;AAgBXC,MAAAA,UAAU,EAAE,EAhBD;AAiBXC,MAAAA,SAAS,EAAE,EAjBA;AAkBXC,MAAAA,OAAO,EAAE;AAlBE,KAAf;AAoBA,SAAKC,uBAAL,GAA+B,KAA/B;AACA,SAAKC,aAAL,GAAqB,mBAArB;AACA,SAAKC,OAAL,GAAe,KAAf;AACA,SAAKC,QAAL,GAAgB,WAAhB;AACA,SAAKC,OAAL,GAAe,WAAf;AACH;;AACKC,EAAAA,QAAQ,GAAG;AAAA;;AAAA;AACb,YAAM,KAAI,CAACC,UAAL,EAAN;AACA,YAAM,KAAI,CAACC,WAAL,EAAN;AAFa;AAGhB;;AACDC,EAAAA,eAAe,GAAG;AACd,SAAKC,gBAAL,CAAsB,KAAtB;AACH;;AACDA,EAAAA,gBAAgB,CAACC,eAAD,EAAkB;AAC9B,QAAIC,KAAK,GAAG,IAAZ;AACA,SAAKT,OAAL,GAAe,IAAf;AACA,SAAKrB,UAAL,CAAgB+B,OAAhB,CAAyB,UAAzB,EAAoC,CAApC,EAAuCC,SAAvC,CAAkDC,GAAD,IAAS;AACtD,WAAKZ,OAAL,GAAe,KAAf;;AACA,UAAIY,GAAG,IAAI,IAAX,EAAiB;AACb,aAAK9B,OAAL,CAAaQ,KAAb,GAAqBsB,GAArB;AACA,aAAKd,uBAAL,GAA+B,IAA/B;AACA,YAAIe,KAAK,GAAG,CAAZ;AACAJ,QAAAA,KAAK,CAAC3B,OAAN,CAAcQ,KAAd,CAAoBwB,iBAApB,CAAsCC,OAAtC,CAA8C,UAAUC,EAAV,EAAc;AACxDC,UAAAA,UAAU,CAAC,MAAM;AACb,gBAAIC,CAAC,CAAE,WAAUF,EAAE,CAACG,OAAH,CAAWC,EAAG,IAAGJ,EAAE,CAACK,MAAH,CAAUD,EAAG,EAA1C,CAAD,CAA8CE,MAA9C,IAAwD,CAA5D,EAA+D;AAC3DT,cAAAA,KAAK;AACR,aAFD,MAGK;AACDK,cAAAA,CAAC,CAAE,WAAUF,EAAE,CAACG,OAAH,CAAWC,EAAG,IAAGJ,EAAE,CAACK,MAAH,CAAUD,EAAG,EAA1C,CAAD,CAA8CG,GAA9C,CAAkDP,EAAE,CAACQ,KAArD;AACAC,cAAAA,YAAY;AACf;AACJ,WARS,EAQPZ,KARO,CAAV;AASH,SAVD;;AAWA,YAAIL,eAAJ,EAAqB;AACjB,cAAI,KAAK1B,OAAL,CAAaQ,KAAb,CAAmBoC,WAAnB,IAAkC,WAAtC,EAAmD;AAC/C,iBAAKxB,OAAL,GAAe,WAAf;AACH,WAFD,MAGK,IAAI,KAAKpB,OAAL,CAAaQ,KAAb,CAAmBoC,WAAnB,IAAkC,WAAtC,EAAmD;AACpD,iBAAKxB,OAAL,GAAe,SAAf;AACH,WAFI,MAGA,IAAI,KAAKpB,OAAL,CAAaQ,KAAb,CAAmBoC,WAAnB,IAAkC,SAAtC,EAAiD;AAClD,iBAAKxB,OAAL,GAAe,WAAf;AACH;AACJ;;AACD,aAAKyB,iBAAL;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAK/C,OAAL,CAAaQ,KAAzB;AACH;AACJ,KA/BD,EA+BGwC,KAAK,IAAI;AACR,WAAK9B,OAAL,GAAe,KAAf;AACH,KAjCD;AAkCH;;AACD2B,EAAAA,iBAAiB,GAAG;AAChB,QAAId,KAAK,GAAG,CAAZ;;AACA,QAAI,CAAC,KAAK/B,OAAL,CAAaQ,KAAb,CAAmBC,QAAxB,EAAkC;AAC9B0B,MAAAA,UAAU,CAAC,MAAM;AACb,YAAI,KAAKnC,OAAL,CAAaQ,KAAb,CAAmBC,QAAvB,EAAiC;AAC7BkC,UAAAA,YAAY;AACf,SAFD,MAGK;AACDZ,UAAAA,KAAK;AACR;AACJ,OAPS,EAOPA,KAPO,CAAV;AAQH;;AACD,SAAK/B,OAAL,CAAaY,SAAb,CAAuBqC,IAAvB,CAA4B,KAAKjD,OAAL,CAAaQ,KAAb,CAAmBC,QAA/C;AACA2B,IAAAA,CAAC,CAAC,cAAD,CAAD,CAAkBK,GAAlB,CAAsB,KAAKzC,OAAL,CAAaQ,KAAb,CAAmBC,QAAnB,CAA4B6B,EAAlD;AACA,SAAKtC,OAAL,CAAaa,UAAb,GAA0B,KAAK,KAAKb,OAAL,CAAaY,SAAb,CAAuBsC,MAAvB,CAA+BC,CAAD,IAAOA,CAAC,CAACb,EAAF,IAAQ,KAAKtC,OAAL,CAAaQ,KAAb,CAAmBC,QAAnB,CAA4B6B,EAAzE,EAA6E,CAA7E,EAAgFzB,UAA/G;AACA,SAAKb,OAAL,CAAac,SAAb,GAAyB,KAAK,KAAKd,OAAL,CAAaa,UAAb,CAAwBqC,MAAxB,CAAgCC,CAAD,IAAOA,CAAC,CAACb,EAAF,IAAQ,KAAKtC,OAAL,CAAaQ,KAAb,CAAmBE,SAAnB,CAA6B4B,EAA3E,EAA+E,CAA/E,EAAkFxB,SAAhH;AACAgC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2B,KAAK/C,OAAhC;AACAoC,IAAAA,CAAC,CAAC,eAAD,CAAD,CAAmBK,GAAnB,CAAuB,KAAKzC,OAAL,CAAaQ,KAAb,CAAmBE,SAAnB,CAA6B4B,EAApD;AACAF,IAAAA,CAAC,CAAC,cAAD,CAAD,CAAkBK,GAAlB,CAAsB,KAAKzC,OAAL,CAAac,SAAb,CAAuB,CAAvB,EAA0BwB,EAAhD;AACAF,IAAAA,CAAC,CAAC,cAAD,CAAD,CAAkBK,GAAlB,CAAsB,KAAK1C,QAAL,CAAcqD,SAAd,CAAwB,KAAKpD,OAAL,CAAaQ,KAAb,CAAmB6C,WAA3C,EAAwD,UAAxD,CAAtB;AACH;;AACDC,EAAAA,gBAAgB,GAAG;AACf,QAAI3B,KAAK,GAAG,IAAZ;AACA,SAAKT,OAAL,GAAe,IAAf;AACA,SAAKrB,UAAL,CAAgB+B,OAAhB,CAAyB,UAAzB,EAAoC,CAApC,EAAuCC,SAAvC,CAAkDC,GAAD,IAAS;AACtD,WAAKZ,OAAL,GAAe,KAAf;;AACA,UAAIY,GAAG,IAAI,IAAX,EAAiB;AACb,aAAK9B,OAAL,CAAaQ,KAAb,GAAqBsB,GAArB;AACA,YAAIC,KAAK,GAAG,CAAZ;AACAJ,QAAAA,KAAK,CAAC3B,OAAN,CAAcQ,KAAd,CAAoBwB,iBAApB,CAAsCC,OAAtC,CAA8C,UAAUC,EAAV,EAAc;AACxDC,UAAAA,UAAU,CAAC,MAAM;AACb,gBAAIC,CAAC,CAAE,WAAUF,EAAE,CAACG,OAAH,CAAWC,EAAG,IAAGJ,EAAE,CAACK,MAAH,CAAUD,EAAG,EAA1C,CAAD,CAA8CE,MAA9C,IAAwD,CAA5D,EAA+D;AAC3DT,cAAAA,KAAK;AACR,aAFD,MAGK;AACDK,cAAAA,CAAC,CAAE,WAAUF,EAAE,CAACG,OAAH,CAAWC,EAAG,IAAGJ,EAAE,CAACK,MAAH,CAAUD,EAAG,EAA1C,CAAD,CAA8CG,GAA9C,CAAkDP,EAAE,CAACQ,KAArD;AACAC,cAAAA,YAAY;AACf;AACJ,WARS,EAQPZ,KARO,CAAV;AASH,SAVD;AAWA,aAAKc,iBAAL;AACH;AACJ,KAlBD,EAkBGG,KAAK,IAAI;AACR,WAAK9B,OAAL,GAAe,KAAf;AACH,KApBD;AAqBH;;AACDqC,EAAAA,SAAS,CAAClB,OAAD,EAAU;AACf,QAAImB,GAAG,GAAG,CAAV;AACApB,IAAAA,CAAC,CAAE,WAAUC,OAAO,CAACC,EAAG,EAAvB,CAAD,CAA2BmB,IAA3B,CAAgC,YAAY;AACxC;AACAD,MAAAA,GAAG,IAAI,CAACpB,CAAC,CAAC,IAAD,CAAD,CAAQK,GAAR,EAAR;AACH,KAHD;AAIAL,IAAAA,CAAC,CAAE,WAAUC,OAAO,CAACC,EAAG,QAAvB,CAAD,CAAiCG,GAAjC,CAAqCe,GAArC;AACH;;AACKlC,EAAAA,UAAU,GAAG;AAAA;;AAAA;AACf,MAAA,MAAI,CAACJ,OAAL,GAAe,IAAf;;AACA,MAAA,MAAI,CAACrB,UAAL,CAAgB+B,OAAhB,CAAyB,iBAAzB,EAA2C,IAA3C,EACKC,SADL,CACgBC,GAAD,IAAS;AACpB,QAAA,MAAI,CAACZ,OAAL,GAAe,KAAf;;AACA,YAAI,CAACY,GAAL,EAAU;AACN,UAAA,MAAI,CAAChC,KAAL,CAAWkD,KAAX,CAAiB,wDAAjB,EAA2E;AACvEU,YAAAA,QAAQ,EAAE,WAD6D;AAEvEC,YAAAA,SAAS,EAAE;AAF4D,WAA3E;AAIH,SALD,MAMK;AACD,cAAI7B,GAAG,CAACU,MAAJ,IAAc,CAAlB,EAAqB;AACjB,YAAA,MAAI,CAACxC,OAAL,CAAaE,MAAb,CAAoB+C,IAApB,CAAyB,mBAAzB;AACH;;AACD,UAAA,MAAI,CAACjD,OAAL,CAAaG,OAAb,GAAuB2B,GAAvB;;AACA,UAAA,MAAI,CAAC9B,OAAL,CAAaG,OAAb,CAAqB8B,OAArB,CAA6B,UAAUM,MAAV,EAAkB;AAC3CA,YAAAA,MAAM,CAACnC,QAAP,GAAkB,EAAlB;AACAmC,YAAAA,MAAM,CAACqB,OAAP,GAAiB,EAAjB;AACH,WAHD;AAIH;AACJ,OAnBD,EAmBGZ,KAAK,IAAI;AACR,QAAA,MAAI,CAAC9B,OAAL,GAAe,KAAf;;AACA,QAAA,MAAI,CAAClB,OAAL,CAAaE,MAAb,CAAoB+C,IAApB,CAAyB,oDAAzB;AACH,OAtBD;AAFe;AAyBlB;;AACK1B,EAAAA,WAAW,GAAG;AAAA;;AAAA;AAChB,MAAA,MAAI,CAACL,OAAL,GAAe,IAAf;;AACA,MAAA,MAAI,CAACrB,UAAL,CAAgB+B,OAAhB,CAAyB,wBAAzB,EAAkD,IAAlD,EACKC,SADL,CACgBC,GAAD,IAAS;AACpB,QAAA,MAAI,CAACZ,OAAL,GAAe,KAAf;;AACA,YAAI,CAACY,GAAL,EAAU;AACN,UAAA,MAAI,CAAChC,KAAL,CAAWkD,KAAX,CAAiB,wDAAjB,EAA2E;AACvEU,YAAAA,QAAQ,EAAE,WAD6D;AAEvEC,YAAAA,SAAS,EAAE;AAF4D,WAA3E;AAIH,SALD,MAMK;AACD,cAAI7B,GAAG,CAACU,MAAJ,IAAc,CAAlB,EAAqB;AACjB,YAAA,MAAI,CAACxC,OAAL,CAAaE,MAAb,CAAoB+C,IAApB,CAAyB,qBAAzB;AACH;;AACDnB,UAAAA,GAAG,CAACG,OAAJ,CAAY,UAAU2B,OAAV,EAAmB;AAC3BA,YAAAA,OAAO,CAACxD,QAAR,CAAiB6B,OAAjB,CAAyB,UAAU4B,IAAV,EAAgB;AACrCA,cAAAA,IAAI,CAACC,KAAL,GAAa,CAAb;;AACAD,cAAAA,IAAI,CAACE,WAAL,CAAiB9B,OAAjB,CAAyB,UAAU+B,IAAV,EAAgB;AACrCA,gBAAAA,IAAI,CAACF,KAAL,GAAa,CAAb;AACH,eAFD;AAGH,aALD;AAMH,WAPD;AAQA,UAAA,MAAI,CAAC9D,OAAL,CAAaK,QAAb,GAAwByB,GAAxB;;AACA,UAAA,MAAI,CAACmC,gBAAL;AACH;AACJ,OAxBD,EAwBGjB,KAAK,IAAI;AACR,QAAA,MAAI,CAAC9B,OAAL,GAAe,KAAf;;AACA,QAAA,MAAI,CAAClB,OAAL,CAAaE,MAAb,CAAoB+C,IAApB,CAAyB,oDAAzB;AACH,OA3BD;AAFgB;AA8BnB;;AACDiB,EAAAA,eAAe,GAAG;AACd,QAAIC,IAAI,GAAG,CAAX;AACA,SAAKnE,OAAL,CAAaK,QAAb,CAAsB4B,OAAtB,CAA+B2B,OAAD,IAAa;AACvCA,MAAAA,OAAO,CAACxD,QAAR,CAAiB6B,OAAjB,CAA0BI,OAAD,IAAa;AAClCA,QAAAA,OAAO,CAAC0B,WAAR,CAAoB9B,OAApB,CAA6BmC,UAAD,IAAgB;AACxC,cAAIA,UAAU,CAACnE,IAAX,IAAmB,IAAnB,IAA2BkE,IAAI,IAAI,CAAvC,EAA0C;AACtC,iBAAKnE,OAAL,CAAaM,iBAAb,CAA+B2C,IAA/B,CAAoC,cAApC;AACAkB,YAAAA,IAAI,GAAG,CAAP;AACH;AACJ,SALD;AAMH,OAPD;AAQH,KATD;AAUH;;AACDF,EAAAA,gBAAgB,GAAG;AACf,QAAI,KAAKjE,OAAL,CAAaK,QAAb,CAAsBmC,MAAtB,GAA+B,CAAnC,EAAsC;AAClC,WAAKxC,OAAL,CAAaM,iBAAb,CAA+B2C,IAA/B,CAAoC,UAApC;AACA,WAAKjD,OAAL,CAAaK,QAAb,CAAsBgE,KAAtB,CAA6BT,OAAD,IAAa;AACrC,YAAIA,OAAO,CAACxD,QAAR,CAAiBoC,MAAjB,GAA0B,CAA9B,EAAiC;AAC7B,eAAKxC,OAAL,CAAaM,iBAAb,CAA+B2C,IAA/B,CAAoC,UAApC;AACA,iBAAO,KAAP;AACH;;AACD,eAAO,IAAP;AACH,OAND;AAOH;;AACD,SAAKiB,eAAL;AACA,SAAKlE,OAAL,CAAaG,OAAb,CAAqB8B,OAArB,CAA8BM,MAAD,IAAY;AACrC,WAAKvC,OAAL,CAAaO,YAAb,CAA0B0C,IAA1B,CAA+BV,MAAM,CAACtC,IAAtC;AACH,KAFD;AAGA,SAAKD,OAAL,CAAaO,YAAb,CAA0B0C,IAA1B,CAA+B,OAA/B;AACH;;AACDqB,EAAAA,IAAI,GAAG;AACH,QAAI3C,KAAK,GAAG,IAAZ;AACA,SAAKT,OAAL,GAAe,KAAf;AACA,SAAKlB,OAAL,CAAaQ,KAAb,CAAmBL,OAAnB,GAA6B,KAAKH,OAAL,CAAaG,OAA1C;AACA,QAAIoE,IAAI,GAAG;AACPpD,MAAAA,QAAQ,EAAE,KAAKC,OAAL,IAAgB,WAAhB,GAA8B,CAA9B,GAAkC,CADrC;AAEPiC,MAAAA,WAAW,EAAE,KAAKrD,OAAL,CAAaQ,KAAb,CAAmB6C,WAFzB;AAGP5C,MAAAA,QAAQ,EAAE,KAAKT,OAAL,CAAaQ,KAAb,CAAmBC,QAHtB;AAIPC,MAAAA,SAAS,EAAE,KAAKV,OAAL,CAAaQ,KAAb,CAAmBE,SAJvB;AAKPC,MAAAA,QAAQ,EAAE,KAAKX,OAAL,CAAaQ,KAAb,CAAmBG,QALtB;AAMPR,MAAAA,OAAO,EAAE,KAAKH,OAAL,CAAaG,OANf;AAOPyC,MAAAA,WAAW,EAAE,KAAKxB,OAPX;AAQPoD,MAAAA,OAAO,EAAE,KAAKxE,OAAL,CAAaQ,KAAb,CAAmBgE,OARrB;AASPvE,MAAAA,IAAI,EAAE;AATC,KAAX;AAWA,SAAKD,OAAL,CAAaQ,KAAb,CAAmBoC,WAAnB,GAAiC,KAAKxB,OAAtC;AACA,SAAKpB,OAAL,CAAaQ,KAAb,CAAmBW,QAAnB,GAA8B,KAAKC,OAAL,IAAgB,WAAhB,GAA8B,CAA9B,GAAkC,CAAhE;;AACAmD,IAAAA,IAAI,CAACpE,OAAL,CAAa8B,OAAb,CAAqB,UAAUwC,OAAV,EAAmB;AACpCA,MAAAA,OAAO,CAACrE,QAAR,GAAmB,EAAnB;AACAuB,MAAAA,KAAK,CAAC3B,OAAN,CAAcK,QAAd,CAAuB4B,OAAvB,CAA+B,UAAU2B,OAAV,EAAmB;AAC9CA,QAAAA,OAAO,CAACxD,QAAR,CAAiB6B,OAAjB,CAAyB,UAAUI,OAAV,EAAmB;AACxC,cAAIkC,IAAI,GAAG;AACPlC,YAAAA,OAAO,EAAEA,OADF;AAEPK,YAAAA,KAAK,EAAEN,CAAC,CAAE,WAAUC,OAAO,CAACC,EAAG,IAAGmC,OAAO,CAACnC,EAAG,EAArC,CAAD,CAAyCG,GAAzC;AAFA,WAAX;AAIA8B,UAAAA,IAAI,CAAClC,OAAL,CAAauB,OAAb,GAAuB,EAAvB;AACAxB,UAAAA,CAAC,CAACsC,MAAF,CAASH,IAAI,CAAClC,OAAL,CAAauB,OAAtB,EAA+BA,OAA/B;AACA,iBAAOW,IAAI,CAAClC,OAAL,CAAauB,OAAb,CAAqBxD,QAA5B;;AACAqE,UAAAA,OAAO,CAACrE,QAAR,CAAiB6C,IAAjB,CAAsBsB,IAAtB;AACH,SATD;AAUH,OAXD;AAYH,KAdD;;AAeA,SAAK1E,UAAL,CAAgB8E,QAAhB,CAAyB,KAAK3E,OAAL,CAAae,OAAtC,EAA+CwD,IAA/C,EAAqD1C,SAArD,CAAgEC,GAAD,IAAS;AACpE,WAAKZ,OAAL,GAAe,KAAf;;AACA,UAAIY,GAAJ,EAAS;AACL,aAAKL,gBAAL,CAAsB,IAAtB;AACH;AACJ,KALD;AAMH;;AA/PqD,CAA1D;AAiQA9B,sBAAsB,GAAGF,UAAU,CAAC,CAChCC,SAAS,CAAC;AACNkF,EAAAA,QAAQ,EAAE,oBADJ;AAENC,EAAAA,WAAW,EAAE,iCAFP;AAGNC,EAAAA,SAAS,EAAE,CAAC,gCAAD;AAHL,CAAD,CADuB,CAAD,EAMhCnF,sBANgC,CAAnC;AAOA,SAASA,sBAAT","sourcesContent":["import { __decorate } from \"tslib\";\r\nimport { Component } from '@angular/core';\r\nlet NonInfectiousComponent = class NonInfectiousComponent {\r\n    constructor(apiService, toast, datePipe) {\r\n        this.apiService = apiService;\r\n        this.toast = toast;\r\n        this.datePipe = datePipe;\r\n        this.content = {\r\n            name: \"Animal Disease Incidence Report\",\r\n            errors: [],\r\n            animals: [{\r\n                    symptoms: []\r\n                }],\r\n            diseases: [],\r\n            fixedColumnHeader: [],\r\n            columnHeader: [],\r\n            forms: {\r\n                district: {},\r\n                institute: {},\r\n                incharge: {},\r\n                diseases: []\r\n            },\r\n            districts: [],\r\n            institutes: [],\r\n            incharges: [],\r\n            apiLink: '/forms'\r\n        };\r\n        this.formIncidenceIsDisabled = false;\r\n        this.saveFormTitle = 'Save and Continue';\r\n        this.loading = false;\r\n        this.formType = \"Incidence\";\r\n        this.openTab = \"incidence\";\r\n    }\r\n    async ngOnInit() {\r\n        await this.getAnimals();\r\n        await this.getDiseases();\r\n    }\r\n    ngAfterViewInit() {\r\n        this.getIncidenceForm(false);\r\n    }\r\n    getIncidenceForm(isAfterSaveLoad) {\r\n        let $this = this;\r\n        this.loading = true;\r\n        this.apiService.getData(`/forms/3`, 3).subscribe((res) => {\r\n            this.loading = false;\r\n            if (res != null) {\r\n                this.content.forms = res;\r\n                this.formIncidenceIsDisabled = true;\r\n                let timer = 0;\r\n                $this.content.forms.formDiseaseValues.forEach(function (fd) {\r\n                    setTimeout(() => {\r\n                        if ($(`#animal_${fd.symptom.id}_${fd.animal.id}`).length <= 0) {\r\n                            timer++;\r\n                        }\r\n                        else {\r\n                            $(`#animal_${fd.symptom.id}_${fd.animal.id}`).val(fd.value);\r\n                            clearTimeout();\r\n                        }\r\n                    }, timer);\r\n                });\r\n                if (isAfterSaveLoad) {\r\n                    if (this.content.forms.currentStep == \"incidence\") {\r\n                        this.openTab = \"mortality\";\r\n                    }\r\n                    else if (this.content.forms.currentStep == \"mortality\") {\r\n                        this.openTab = \"remarks\";\r\n                    }\r\n                    else if (this.content.forms.currentStep == \"remarks\") {\r\n                        this.openTab = \"completed\";\r\n                    }\r\n                }\r\n                this.getSelectedValues();\r\n                console.log(this.content.forms);\r\n            }\r\n        }, error => {\r\n            this.loading = false;\r\n        });\r\n    }\r\n    getSelectedValues() {\r\n        var timer = 1;\r\n        if (!this.content.forms.district) {\r\n            setTimeout(() => {\r\n                if (this.content.forms.district) {\r\n                    clearTimeout();\r\n                }\r\n                else {\r\n                    timer++;\r\n                }\r\n            }, timer);\r\n        }\r\n        this.content.districts.push(this.content.forms.district);\r\n        $('#selDistrict').val(this.content.forms.district.id);\r\n        this.content.institutes = [] = this.content.districts.filter((a) => a.id == this.content.forms.district.id)[0].institutes;\r\n        this.content.incharges = [] = this.content.institutes.filter((a) => a.id == this.content.forms.institute.id)[0].incharges;\r\n        console.log(\"after timer\", this.content);\r\n        $('#selInstitute').val(this.content.forms.institute.id);\r\n        $('#selIncharge').val(this.content.incharges[0].id);\r\n        $('#createdDate').val(this.datePipe.transform(this.content.forms.createdDate, \"MMM yyyy\"));\r\n    }\r\n    getMortalityForm() {\r\n        let $this = this;\r\n        this.loading = true;\r\n        this.apiService.getData(`/forms/4`, 4).subscribe((res) => {\r\n            this.loading = false;\r\n            if (res != null) {\r\n                this.content.forms = res;\r\n                let timer = 0;\r\n                $this.content.forms.formDiseaseValues.forEach(function (fd) {\r\n                    setTimeout(() => {\r\n                        if ($(`#animal_${fd.symptom.id}_${fd.animal.id}`).length <= 0) {\r\n                            timer++;\r\n                        }\r\n                        else {\r\n                            $(`#animal_${fd.symptom.id}_${fd.animal.id}`).val(fd.value);\r\n                            clearTimeout();\r\n                        }\r\n                    }, timer);\r\n                });\r\n                this.getSelectedValues();\r\n            }\r\n        }, error => {\r\n            this.loading = false;\r\n        });\r\n    }\r\n    calcTotal(symptom) {\r\n        var sum = 0;\r\n        $(`.animal_${symptom.id}`).each(function () {\r\n            // @ts-ignore\r\n            sum += +$(this).val();\r\n        });\r\n        $(`.animal_${symptom.id}_total`).val(sum);\r\n    }\r\n    async getAnimals() {\r\n        this.loading = true;\r\n        this.apiService.getData(`/master/animals`, null)\r\n            .subscribe((res) => {\r\n            this.loading = false;\r\n            if (!res) {\r\n                this.toast.error(\"Could not connect to Server. Try again after sometime.\", {\r\n                    position: 'top-right',\r\n                    autoClose: true\r\n                });\r\n            }\r\n            else {\r\n                if (res.length <= 0) {\r\n                    this.content.errors.push(\"No animals found.\");\r\n                }\r\n                this.content.animals = res;\r\n                this.content.animals.forEach(function (animal) {\r\n                    animal.symptoms = [];\r\n                    animal.disease = {};\r\n                });\r\n            }\r\n        }, error => {\r\n            this.loading = false;\r\n            this.content.errors.push(\"Could not load data at this time. Try again later.\");\r\n        });\r\n    }\r\n    async getDiseases() {\r\n        this.loading = true;\r\n        this.apiService.getData(`/diseases/byCategory/1`, null)\r\n            .subscribe((res) => {\r\n            this.loading = false;\r\n            if (!res) {\r\n                this.toast.error(\"Could not connect to Server. Try again after sometime.\", {\r\n                    position: 'top-right',\r\n                    autoClose: true\r\n                });\r\n            }\r\n            else {\r\n                if (res.length <= 0) {\r\n                    this.content.errors.push(\"No Diseases found!!\");\r\n                }\r\n                res.forEach(function (disease) {\r\n                    disease.symptoms.forEach(function (_sym) {\r\n                        _sym.total = 0;\r\n                        _sym.subSymptoms.forEach(function (_sub) {\r\n                            _sub.total = 0;\r\n                        });\r\n                    });\r\n                });\r\n                this.content.diseases = res;\r\n                this.getColumnHeaders();\r\n            }\r\n        }, error => {\r\n            this.loading = false;\r\n            this.content.errors.push(\"Could not load data at this time. Try again later.\");\r\n        });\r\n    }\r\n    getFixedHeaders() {\r\n        let flag = 0;\r\n        this.content.diseases.forEach((disease) => {\r\n            disease.symptoms.forEach((symptom) => {\r\n                symptom.subSymptoms.forEach((subSymptom) => {\r\n                    if (subSymptom.name != null && flag == 0) {\r\n                        this.content.fixedColumnHeader.push(\"Sub Symptoms\");\r\n                        flag = 1;\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n    getColumnHeaders() {\r\n        if (this.content.diseases.length > 0) {\r\n            this.content.fixedColumnHeader.push(\"Diseases\");\r\n            this.content.diseases.every((disease) => {\r\n                if (disease.symptoms.length > 0) {\r\n                    this.content.fixedColumnHeader.push(\"Symptoms\");\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n        }\r\n        this.getFixedHeaders();\r\n        this.content.animals.forEach((animal) => {\r\n            this.content.columnHeader.push(animal.name);\r\n        });\r\n        this.content.columnHeader.push(\"Total\");\r\n    }\r\n    save() {\r\n        let $this = this;\r\n        this.loading = false;\r\n        this.content.forms.animals = this.content.animals;\r\n        var _obj = {\r\n            formType: this.openTab == 'incidence' ? 3 : 4,\r\n            createdDate: this.content.forms.createdDate,\r\n            district: this.content.forms.district,\r\n            institute: this.content.forms.institute,\r\n            incharge: this.content.forms.incharge,\r\n            animals: this.content.animals,\r\n            currentStep: this.openTab,\r\n            remarks: this.content.forms.remarks,\r\n            name: \"NonInfectious\"\r\n        };\r\n        this.content.forms.currentStep = this.openTab;\r\n        this.content.forms.formType = this.openTab == \"incidence\" ? 3 : 4;\r\n        _obj.animals.forEach(function (_animal) {\r\n            _animal.symptoms = [];\r\n            $this.content.diseases.forEach(function (disease) {\r\n                disease.symptoms.forEach(function (symptom) {\r\n                    var _obj = {\r\n                        symptom: symptom,\r\n                        value: $(`#animal_${symptom.id}_${_animal.id}`).val()\r\n                    };\r\n                    _obj.symptom.disease = {};\r\n                    $.extend(_obj.symptom.disease, disease);\r\n                    delete _obj.symptom.disease.symptoms;\r\n                    _animal.symptoms.push(_obj);\r\n                });\r\n            });\r\n        });\r\n        this.apiService.postData(this.content.apiLink, _obj).subscribe((res) => {\r\n            this.loading = false;\r\n            if (res) {\r\n                this.getIncidenceForm(true);\r\n            }\r\n        });\r\n    }\r\n};\r\nNonInfectiousComponent = __decorate([\r\n    Component({\r\n        selector: 'app-non-infectious',\r\n        templateUrl: './non-infectious.component.html',\r\n        styleUrls: ['./non-infectious.component.css']\r\n    })\r\n], NonInfectiousComponent);\r\nexport { NonInfectiousComponent };\r\n"]},"metadata":{},"sourceType":"module"}