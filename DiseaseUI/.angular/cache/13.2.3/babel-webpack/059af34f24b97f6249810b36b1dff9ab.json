{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport let AuthenticationService = /*#__PURE__*/(() => {\n  class AuthenticationService {\n    constructor(router, http) {\n      this.router = router;\n      this.http = http; // @ts-ignore\n\n      this.userSubject = new BehaviorSubject(JSON.parse(sessionStorage.getItem('loggedUser')));\n      this.user = this.userSubject.asObservable();\n    }\n\n    get userValue() {\n      return this.userSubject.value;\n    }\n\n    login(userName, password) {\n      return this.http.post(`${environment.apiUrl}/Auth/Verify`, {\n        userName,\n        password\n      }, {\n        withCredentials: true\n      }).pipe(map(user => {\n        if (user.result.error) {\n          return false;\n        }\n\n        sessionStorage.setItem(\"loggedUser\", JSON.stringify(user.result));\n        this.userSubject.next(user.result);\n        this.startRefreshTokenTimer();\n        return user;\n      }));\n    }\n\n    logout() {\n      window.sessionStorage.clear();\n      this.stopRefreshTokenTimer(); // @ts-ignore   \n\n      this.userSubject.next(null);\n      this.http.post(`${environment.apiUrl}/logout`, {}, {\n        withCredentials: true\n      }).subscribe();\n      this.router.navigate(['/login']);\n    }\n\n    refreshToken() {\n      return this.http.post(`${environment.apiUrl}/Auth/Verify`, {}, {\n        withCredentials: true\n      }).pipe(map(user => {\n        this.userSubject.next(user);\n        this.startRefreshTokenTimer();\n        return user;\n      }));\n    }\n\n    startRefreshTokenTimer() {\n      // parse json object from base64 encoded jwt token\n      // @ts-ignore\n      if (this.userValue.access_token != undefined) {\n        const jwtToken = this.userValue.access_token.accessToken; // set a timeout to refresh the token a minute before it expires\n\n        const expires = new Date(jwtToken.exp * 1000);\n        const timeout = expires.getTime() - Date.now() - 60 * 1000;\n        this.refreshTokenTimeout = setTimeout(() => this.refreshToken().subscribe(), timeout);\n      }\n    }\n\n    stopRefreshTokenTimer() {\n      clearTimeout(this.refreshTokenTimeout);\n    }\n\n  }\n\n  AuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n  };\n\n  AuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthenticationService;\n})();","map":null,"metadata":{},"sourceType":"module"}