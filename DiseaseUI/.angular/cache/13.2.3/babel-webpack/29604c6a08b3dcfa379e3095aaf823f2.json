{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../_services/authentication.service\";\nimport * as i2 from \"@ngneat/hot-toast\";\nexport let ErrorInterceptor = /*#__PURE__*/(() => {\n  class ErrorInterceptor {\n    constructor(authenticationService, toast) {\n      this.authenticationService = authenticationService;\n      this.toast = toast;\n    }\n\n    intercept(request, next) {\n      return next.handle(request).pipe(catchError(err => {\n        if ([401, 403].includes(err.status) && this.authenticationService.userValue) {\n          // auto logout if 401 or 403 response returned from api\n          this.authenticationService.logout(); // @ts-ignore\n\n          location.reload(true);\n        } else if ([500].includes(err.status)) {\n          this.toast.error(\"Internal Server Error!!\", {\n            position: 'top-right',\n            autoClose: true\n          });\n        }\n\n        const error = err && err.error && err.error.message || err.statusText;\n        console.error(err);\n        return throwError(error);\n      }));\n    }\n\n  }\n\n  ErrorInterceptor.ɵfac = function ErrorInterceptor_Factory(t) {\n    return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.AuthenticationService), i0.ɵɵinject(i2.HotToastService));\n  };\n\n  ErrorInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErrorInterceptor,\n    factory: ErrorInterceptor.ɵfac\n  });\n  return ErrorInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}