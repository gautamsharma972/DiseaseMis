{"ast":null,"code":"import _asyncToGenerator from \"D:\\\\Projects\\\\DiseaseMIS\\\\Disease_UI\\\\Disease_UI\\\\UI\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component, ViewChildren } from '@angular/core';\nlet NonInfectiousComponent = class NonInfectiousComponent {\n  constructor(apiService, toast, diseaseFormComponent) {\n    this.apiService = apiService;\n    this.toast = toast;\n    this.diseaseFormComponent = diseaseFormComponent;\n    this.content = {\n      name: \"Animal Disease Incidence Report\",\n      errors: [],\n      animals: [{\n        symptoms: []\n      }],\n      diseases: [],\n      fixedColumnHeader: [],\n      columnHeader: [],\n      forms: {\n        district: {},\n        institute: {},\n        incharge: {},\n        diseases: []\n      },\n      districts: [],\n      institutes: [],\n      incharges: [],\n      apiLink: '/forms'\n    };\n    this.formIncidenceIsDisabled = false;\n    this.saveFormTitle = 'Save and Continue';\n    this.loading = false;\n    this.formType = \"Incidence\";\n  }\n\n  ngAfterViewInit() {\n    // console.log(this.diseaseFormComponent.getData());\n    this.things.changes.subscribe(t => {\n      this.getCurrentMonthForm();\n    });\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.getAnimals();\n\n      _this.getDiseases();\n    })();\n  }\n\n  getCurrentMonthForm() {\n    let $this = this;\n    this.loading = true;\n    this.apiService.getData(`/forms`, null).subscribe(res => {\n      this.loading = false;\n      this.content.forms = res;\n      console.log(\"get form\", this.content);\n      $this.content.forms.formDiseaseValues.forEach(function (fd) {\n        debugger;\n        $(`#animal_${fd.symptom.id}_${fd.animal.id}`).val(fd.value);\n      });\n    }, error => {\n      this.loading = false;\n    });\n  }\n\n  getAnimals() {\n    this.loading = true;\n    this.apiService.getData(`/master/animals`, null).subscribe(res => {\n      this.loading = false;\n\n      if (!res) {\n        this.toast.error(\"Could not connect to Server. Try again after sometime.\", {\n          position: 'top-right',\n          autoClose: true\n        });\n      } else {\n        if (res.length <= 0) {\n          this.content.errors.push(\"No animals found.\");\n        }\n\n        this.content.animals = res;\n        this.content.animals.forEach(function (animal) {\n          animal.symptoms = [];\n          animal.disease = {};\n        });\n      }\n    }, error => {\n      this.loading = false;\n      this.content.errors.push(\"Could not load data at this time. Try again later.\");\n    });\n  }\n\n  getDiseases() {\n    this.loading = true;\n    this.apiService.getData(`/diseases/byCategory/1`, null).subscribe(res => {\n      this.loading = false;\n\n      if (!res) {\n        this.toast.error(\"Could not connect to Server. Try again after sometime.\", {\n          position: 'top-right',\n          autoClose: true\n        });\n      } else {\n        if (res.length <= 0) {\n          this.content.errors.push(\"No Diseases found!!\");\n        }\n\n        res.forEach(function (disease) {\n          disease.symptoms.forEach(function (_sym) {\n            _sym.total = 0;\n\n            _sym.subSymptoms.forEach(function (_sub) {\n              _sub.total = 0;\n            });\n          });\n        });\n        this.content.diseases = res;\n        this.getColumnHeaders();\n      }\n    }, error => {\n      this.loading = false;\n      this.content.errors.push(\"Could not load data at this time. Try again later.\");\n    });\n  }\n\n  getFixedHeaders() {\n    let flag = 0;\n    this.content.diseases.forEach(disease => {\n      disease.symptoms.forEach(symptom => {\n        symptom.subSymptoms.forEach(subSymptom => {\n          if (subSymptom.name != null && flag == 0) {\n            this.content.fixedColumnHeader.push(\"Sub Symptoms\");\n            flag = 1;\n          }\n        });\n      });\n    });\n  }\n\n  getColumnHeaders() {\n    if (this.content.diseases.length > 0) {\n      this.content.fixedColumnHeader.push(\"Diseases\");\n      this.content.diseases.every(disease => {\n        if (disease.symptoms.length > 0) {\n          this.content.fixedColumnHeader.push(\"Symptoms\");\n          return false;\n        }\n\n        return true;\n      });\n    }\n\n    this.getFixedHeaders();\n    this.content.animals.forEach(animal => {\n      this.content.columnHeader.push(animal.name);\n    });\n    this.content.columnHeader.push(\"Total\");\n  }\n\n  save(form) {\n    console.log(\"form\", form);\n    let $this = this;\n    this.loading = false;\n    this.content.forms.animals = this.content.animals;\n    this.content.forms.formType = this.formIncidenceIsDisabled ? 3 : 2;\n    console.log(this.content);\n    var _obj = {\n      formType: this.formIncidenceIsDisabled ? 3 : 2,\n      createdDate: this.content.forms.createdDate,\n      district: this.content.forms.district,\n      institute: this.content.forms.institute,\n      incharge: this.content.forms.incharge,\n      animals: this.content.animals\n    };\n\n    _obj.animals.forEach(function (_animal) {\n      _animal.symptoms = [];\n      $this.content.diseases.forEach(function (disease) {\n        disease.symptoms.forEach(function (symptom) {\n          var _obj = {\n            symptom: symptom,\n            value: $(`#animal_${symptom.id}_${_animal.id}`).val()\n          };\n          _obj.symptom.disease = {}; //_obj.symptom.disease = disease;\n\n          $.extend(_obj.symptom.disease, disease);\n          delete _obj.symptom.disease.symptoms;\n\n          _animal.symptoms.push(_obj);\n        });\n      });\n    });\n\n    console.log(\"post\", _obj);\n    this.apiService.postData(this.content.apiLink, this.content.forms).subscribe(res => {\n      this.loading = false;\n\n      if (res) {\n        this.saveFormTitle = 'Save Form';\n        this.formIncidenceIsDisabled = true;\n        this.getCurrentMonthForm();\n      }\n\n      console.log(res);\n    });\n  }\n\n};\n\n__decorate([ViewChildren('diseaseFormTable')], NonInfectiousComponent.prototype, \"things\", void 0);\n\nNonInfectiousComponent = __decorate([Component({\n  selector: 'app-non-infectious',\n  templateUrl: './non-infectious.component.html',\n  styleUrls: ['./non-infectious.component.css']\n})], NonInfectiousComponent);\nexport { NonInfectiousComponent };","map":{"version":3,"sources":["D:/Projects/DiseaseMIS/Disease_UI/Disease_UI/UI/src/app/views/forms/non-infectious/non-infectious.component.ts"],"names":["__decorate","Component","ViewChildren","NonInfectiousComponent","constructor","apiService","toast","diseaseFormComponent","content","name","errors","animals","symptoms","diseases","fixedColumnHeader","columnHeader","forms","district","institute","incharge","districts","institutes","incharges","apiLink","formIncidenceIsDisabled","saveFormTitle","loading","formType","ngAfterViewInit","things","changes","subscribe","t","getCurrentMonthForm","ngOnInit","getAnimals","getDiseases","$this","getData","res","console","log","formDiseaseValues","forEach","fd","$","symptom","id","animal","val","value","error","position","autoClose","length","push","disease","_sym","total","subSymptoms","_sub","getColumnHeaders","getFixedHeaders","flag","subSymptom","every","save","form","_obj","createdDate","_animal","extend","postData","prototype","selector","templateUrl","styleUrls"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\r\nimport { Component, ViewChildren } from '@angular/core';\r\nlet NonInfectiousComponent = class NonInfectiousComponent {\r\n    constructor(apiService, toast, diseaseFormComponent) {\r\n        this.apiService = apiService;\r\n        this.toast = toast;\r\n        this.diseaseFormComponent = diseaseFormComponent;\r\n        this.content = {\r\n            name: \"Animal Disease Incidence Report\",\r\n            errors: [],\r\n            animals: [{\r\n                    symptoms: []\r\n                }],\r\n            diseases: [],\r\n            fixedColumnHeader: [],\r\n            columnHeader: [],\r\n            forms: {\r\n                district: {},\r\n                institute: {},\r\n                incharge: {},\r\n                diseases: []\r\n            },\r\n            districts: [],\r\n            institutes: [],\r\n            incharges: [],\r\n            apiLink: '/forms'\r\n        };\r\n        this.formIncidenceIsDisabled = false;\r\n        this.saveFormTitle = 'Save and Continue';\r\n        this.loading = false;\r\n        this.formType = \"Incidence\";\r\n    }\r\n    ngAfterViewInit() {\r\n        // console.log(this.diseaseFormComponent.getData());\r\n        this.things.changes.subscribe(t => {\r\n            this.getCurrentMonthForm();\r\n        });\r\n    }\r\n    async ngOnInit() {\r\n        this.getAnimals();\r\n        this.getDiseases();\r\n    }\r\n    getCurrentMonthForm() {\r\n        let $this = this;\r\n        this.loading = true;\r\n        this.apiService.getData(`/forms`, null).subscribe((res) => {\r\n            this.loading = false;\r\n            this.content.forms = res;\r\n            console.log(\"get form\", this.content);\r\n            $this.content.forms.formDiseaseValues.forEach(function (fd) {\r\n                debugger;\r\n                $(`#animal_${fd.symptom.id}_${fd.animal.id}`).val(fd.value);\r\n            });\r\n        }, error => {\r\n            this.loading = false;\r\n        });\r\n    }\r\n    getAnimals() {\r\n        this.loading = true;\r\n        this.apiService.getData(`/master/animals`, null)\r\n            .subscribe((res) => {\r\n            this.loading = false;\r\n            if (!res) {\r\n                this.toast.error(\"Could not connect to Server. Try again after sometime.\", {\r\n                    position: 'top-right',\r\n                    autoClose: true\r\n                });\r\n            }\r\n            else {\r\n                if (res.length <= 0) {\r\n                    this.content.errors.push(\"No animals found.\");\r\n                }\r\n                this.content.animals = res;\r\n                this.content.animals.forEach(function (animal) {\r\n                    animal.symptoms = [];\r\n                    animal.disease = {};\r\n                });\r\n            }\r\n        }, error => {\r\n            this.loading = false;\r\n            this.content.errors.push(\"Could not load data at this time. Try again later.\");\r\n        });\r\n    }\r\n    getDiseases() {\r\n        this.loading = true;\r\n        this.apiService.getData(`/diseases/byCategory/1`, null)\r\n            .subscribe((res) => {\r\n            this.loading = false;\r\n            if (!res) {\r\n                this.toast.error(\"Could not connect to Server. Try again after sometime.\", {\r\n                    position: 'top-right',\r\n                    autoClose: true\r\n                });\r\n            }\r\n            else {\r\n                if (res.length <= 0) {\r\n                    this.content.errors.push(\"No Diseases found!!\");\r\n                }\r\n                res.forEach(function (disease) {\r\n                    disease.symptoms.forEach(function (_sym) {\r\n                        _sym.total = 0;\r\n                        _sym.subSymptoms.forEach(function (_sub) {\r\n                            _sub.total = 0;\r\n                        });\r\n                    });\r\n                });\r\n                this.content.diseases = res;\r\n                this.getColumnHeaders();\r\n            }\r\n        }, error => {\r\n            this.loading = false;\r\n            this.content.errors.push(\"Could not load data at this time. Try again later.\");\r\n        });\r\n    }\r\n    getFixedHeaders() {\r\n        let flag = 0;\r\n        this.content.diseases.forEach((disease) => {\r\n            disease.symptoms.forEach((symptom) => {\r\n                symptom.subSymptoms.forEach((subSymptom) => {\r\n                    if (subSymptom.name != null && flag == 0) {\r\n                        this.content.fixedColumnHeader.push(\"Sub Symptoms\");\r\n                        flag = 1;\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n    getColumnHeaders() {\r\n        if (this.content.diseases.length > 0) {\r\n            this.content.fixedColumnHeader.push(\"Diseases\");\r\n            this.content.diseases.every((disease) => {\r\n                if (disease.symptoms.length > 0) {\r\n                    this.content.fixedColumnHeader.push(\"Symptoms\");\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n        }\r\n        this.getFixedHeaders();\r\n        this.content.animals.forEach((animal) => {\r\n            this.content.columnHeader.push(animal.name);\r\n        });\r\n        this.content.columnHeader.push(\"Total\");\r\n    }\r\n    save(form) {\r\n        console.log(\"form\", form);\r\n        let $this = this;\r\n        this.loading = false;\r\n        this.content.forms.animals = this.content.animals;\r\n        this.content.forms.formType = this.formIncidenceIsDisabled ? 3 : 2;\r\n        console.log(this.content);\r\n        var _obj = {\r\n            formType: this.formIncidenceIsDisabled ? 3 : 2,\r\n            createdDate: this.content.forms.createdDate,\r\n            district: this.content.forms.district,\r\n            institute: this.content.forms.institute,\r\n            incharge: this.content.forms.incharge,\r\n            animals: this.content.animals\r\n        };\r\n        _obj.animals.forEach(function (_animal) {\r\n            _animal.symptoms = [];\r\n            $this.content.diseases.forEach(function (disease) {\r\n                disease.symptoms.forEach(function (symptom) {\r\n                    var _obj = {\r\n                        symptom: symptom,\r\n                        value: $(`#animal_${symptom.id}_${_animal.id}`).val()\r\n                    };\r\n                    _obj.symptom.disease = {};\r\n                    //_obj.symptom.disease = disease;\r\n                    $.extend(_obj.symptom.disease, disease);\r\n                    delete _obj.symptom.disease.symptoms;\r\n                    _animal.symptoms.push(_obj);\r\n                });\r\n            });\r\n        });\r\n        console.log(\"post\", _obj);\r\n        this.apiService.postData(this.content.apiLink, this.content.forms).subscribe((res) => {\r\n            this.loading = false;\r\n            if (res) {\r\n                this.saveFormTitle = 'Save Form';\r\n                this.formIncidenceIsDisabled = true;\r\n                this.getCurrentMonthForm();\r\n            }\r\n            console.log(res);\r\n        });\r\n    }\r\n};\r\n__decorate([\r\n    ViewChildren('diseaseFormTable')\r\n], NonInfectiousComponent.prototype, \"things\", void 0);\r\nNonInfectiousComponent = __decorate([\r\n    Component({\r\n        selector: 'app-non-infectious',\r\n        templateUrl: './non-infectious.component.html',\r\n        styleUrls: ['./non-infectious.component.css']\r\n    })\r\n], NonInfectiousComponent);\r\nexport { NonInfectiousComponent };\r\n"]},"metadata":{},"sourceType":"module"}